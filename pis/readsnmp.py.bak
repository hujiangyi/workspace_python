import sys
sys.path.append("C:\WINDOWS\SYSTEM32\python27.zip")
sys.path.append("C:\Python27\DLLs")
sys.path.append("C:\Python27\lib")
sys.path.append("C:\Python27\lib\plat-win")
sys.path.append("C:\Python27\lib\lib-tk")
sys.path.append("C:\Python27")
sys.path.append("C:\Python27\lib\site-packages")

import serial
import re
import os
import time

res = ''
ss = serial.Serial()

def result():
    global res
    return res;

def connect(p='COM3'):
    try:
        ss.port = p
        ss.baudrate  = 9600
        ss.open()
    except BaseException,msg:
        print msg
        msg = 'Serial port connecting failed'
        raise Exception(msg)

def close():
    try:
        ss.close()
    except Exception,msg:
        print msg
        msg = 'Serial port close failed'
        raise Exception(msg)

def send(cmd):
    terminator = '\r'
    cmd = str(cmd)
    cmd += terminator
    try:
        msg = cmd
        ss.write(cmd)
    except Exception,msg:
        print msg
        raise Exception("Serial port write error!")

def read(delay=1):
    time.sleep(delay)
    n = ss.inWaiting()
    str = ss.read(n)
    return str

def readuntil(waitstr='xxx', timeout=1):
    tmp=""
    if timeout:
        delay = 0.0
        while delay <= timeout:
            tmp += read()
            if waitstr in tmp:
                return tmp
            delay += 1
        raise Exception("wait str timeout")
    else:
        while 1:
            tmp += read()
            if waitstr in tmp:
                return tmp

def sendF2():
    global res
    res = "";
    try:
        res += readuntil(waitstr='stop auto-boot', timeout=30);
        cmd = '\033OQ'
        send(cmd)
        res += readuntil('[PN8600 Boot]:')
        return True
    except Exception,msg:
        print msg
        return False

def reboot():
    global res
    res = "";
    try:
        send('end')
        res += readuntil('PN8600#')
        send('erase start-upconfig')
        res += readuntil('PN8600#')
        send('system reboot')
        res += readuntil('System will reboot!')
        send('y')
        res += readuntil('System now is rebooting,please wait.')
        return True
    except Exception,msg:
        print msg
        return False
    

def startUpArg():
    global res
    res = "";
    try:
        send('p')
        res += readuntil('[PN8600 Boot]:')
        print
        send('c')
        res += readuntil('boot device          :')
        send('mottsec0')
        res += readuntil('processor number')
        send('0')
        res += readuntil('host name')
        send('host')
        res += readuntil('file name')
        send('mpu.bin')
        res += readuntil('inet on ethernet (e) :')
        send('192.168.0.10')
        res += readuntil('inet on backplane (b):')
        send('')
        res += readuntil('host inet (h)        :')
        send('192.168.0.200')
        res += readuntil('gateway inet (g)     :')
        send('')
        res += readuntil('user (u)             :')
        send('suma')
        res += readuntil('ftp password (pw) (blank = use rsh):')
        send('sumavision')
        res += readuntil('flags (f)            :')
        send('0x0')
        res += readuntil('target name (tn)     :')
        send('ads8308')
        res += readuntil('startup script (s)   :')
        send('')
        res += readuntil('other (o)            :')
        send('mottsec0')
        res += readuntil('[PN8600 Boot]:')
        send('p')
        res += readuntil('[PN8600 Boot]:')
        send('@')
        return True
    except Exception,msg:
        print msg
        return False

def mpuStarted(str):
    global res
    res = "";
    if 'assword:' in str:
        try:
            send('')
            res += readuntil(waitstr='assword:', timeout=30);
            send('suma')
            res += readuntil('PN8600>')
            send('en')
            res += readuntil('Enable Password:')
            send('suma')
            res += readuntil('PN8600#')

            return True
        except Exception,msg:
            print msg
            return False
    else :
        return False

def assignBoard():
    global res
    res = "";
    try:
        send('end')
        res += readuntil('PN8600#')
        send('show board')
        boardInfo = readuntil(waitstr='PN8600#');
        res +=boardInfo
        send('configure terminal')
        res += readuntil('PN8600(config)#')
        bs = boardInfo.split('\r\r\n')
        for s in bs :
            if 'show board' in s :
                continue
            if 'Slot   Assign Type      Present Type     Admin Status     Operation Status' in s :
                continue
            if '------' in s :
                continue
            if 'Total:' in s :
                continue
            if '#' in s :
                continue
            #print s
            slotid=s[2:3]
            assignType=s[9:13].strip()
            presentType=s[26:33].strip()
            adminStatus=s[43:46]
            operationStatus=s[60:64]
            #print slotid + ' ' + assignType + ' ' + presentType + ' ' + adminStatus + ' ' + operationStatus
            if presentType == 'unknown':
                continue
            if presentType == '-':
                continue
            if assignType != '-':
                continue
            presentType=presentType[0:4]
            cmd='board assign ' + slotid + ' ' + presentType;
            send(cmd)
            res +=readuntil(waitstr='PN8600(config)#');
            cmd='board admin ' + slotid + ' is';
            send(cmd)
            res +=readuntil(waitstr='PN8600(config)#');
        return True
    except Exception,msg:
        print msg
        return False

def doDownload(type,file):
    send('end')
    res += readuntil('PN8600#')
    send('download ' + type + ' 192.168.0.200 suma sumavision ' + file)
    res += readuntil('PN8600#')
    time.sleep(10)
    send('show file transfering-status')
    fts = readuntil('PN8600#')
    res +=fts
    while 'successfully' not in fts :
        if 'transfer failed' in fts :
            raise Exception(file + " transfer failed")
        time.sleep(10)
        send('show file transfering-status')
        fts = readuntil('PN8600#')
        res +=fts
def downloadImage():
    global res
    res = "";
    try:
        doDownload('mpu','mpu.bin')
        doDownload('mpubak','mpu.bin')
        doDownload('epu','epu.bin')
        doDownload('geu','geu.bin')
        doDownload('xgu','xgu.bin')
        doDownload('geu','geu.bin')
        doDownload('bootrom','bootrom.bin')
        return True
    except Exception,msg:
        print msg
        return False

def upgradeBootrom():
    global res
    res = "";
    try:
        send('end')
        res += readuntil('PN8600#')
        send('show board')
        boardInfo = readuntil(waitstr='PN8600#');
        res +=boardInfo
        bs = boardInfo.split('\r\r\n')
        for s in bs :
            if 'show board' in s :
                continue
            if 'Slot   Assign Type      Present Type     Admin Status     Operation Status' in s :
                continue
            if '------' in s :
                continue
            if 'Total:' in s :
                continue
            if '#' in s :
                continue
            #print s
            slotid=s[2:3]
            assignType=s[9:13].strip()
            presentType=s[26:33].strip()
            adminStatus=s[43:46]
            operationStatus=s[60:64]
            #print slotid + ' ' + assignType + ' ' + presentType + ' ' + adminStatus + ' ' + operationStatus
            if operationStatus == 'IS':
                cmd = 'upgrade bootrom slot ' + slotid
                send(cmd)
                upgraderesult = readuntil(waitstr='PN8600#');
                res+=upgraderesult
                if '%' in upgraderesult :
                    raise Exception('slot ' + slotid + " upgrade bootrom failed")
        return True
    except Exception,msg:
        print msg
        return False

def outbandIp():
    global res
    res = "";
    try:
        send('end')
        res += readuntil('PN8600#')
        send('configure terminal')
        res += readuntil('PN8600(config)#')
        send('outband ip-address 192.168.0.10 255.255.255.0')
        outbandIp= readuntil('PN8600(config)#')
        res+=outbandIp
        if '%' in outbandIp :
            raise Exception("set outbandIp error")
        return True
    except Exception,msg:
        print msg
        return False

def rtcTime():
    global res
    res = "";
    try:
        import datetime
        i = datetime.datetime.now()
        year = i.year
        month=i.month
        day=i.day
        hour=i.hour
        minute=i.minute
        second=i.second
        cmd='datetime ' + str(year) + ' ' + str(month) + ' ' + str(day) + ' ' + str(hour) + ' ' + str(minute) + ' ' + str(second)
        send('end')
        res += readuntil('PN8600#')
        send('configure terminal')
        res += readuntil('PN8600(config)#')
        send(cmd)
        rtcTime= readuntil('PN8600(config)#')
        res+=rtcTime
        if '%' in rtcTime :
            raise Exception("set rtcTime error")
        return True
    except Exception,msg:
        print msg
        return False

def boardInfo():
    global res
    res = "";
    try:
        res += readuntil(waitstr='stop auto-boot', timeout=30);
        cmd = '\033OQ'
        send(cmd)
        res += readuntil('[PN8600 Boot]:')
        return True
    except Exception,msg:
        print msg
        return False

def boardTemperature():
    global res
    res = "";
    try:
        res += readuntil(waitstr='stop auto-boot', timeout=30);
        cmd = '\033OQ'
        send(cmd)
        res += readuntil('[PN8600 Boot]:')
        return True
    except Exception,msg:
        print msg
        return False

def opticalModuleInfo():
    global res
    res = "";
    try:
        res += readuntil(waitstr='stop auto-boot', timeout=30);
        cmd = '\033OQ'
        send(cmd)
        res += readuntil('[PN8600 Boot]:')
        return True
    except Exception,msg:
        print msg
        return False

def funInfo():
    global res
    res = "";
    try:
        res += readuntil(waitstr='stop auto-boot', timeout=30);
        cmd = '\033OQ'
        send(cmd)
        res += readuntil('[PN8600 Boot]:')
        return True
    except Exception,msg:
        print msg
        return False

def powerTest():
    global res
    res = "";
    try:
        res += readuntil(waitstr='stop auto-boot', timeout=30);
        cmd = '\033OQ'
        send(cmd)
        res += readuntil('[PN8600 Boot]:')
        return True
    except Exception,msg:
        print msg
        return False


